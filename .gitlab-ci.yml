# This script defines kind of a local CI/CD pipeline. Unfortunately it is very dependent on the local system on which the containers are situated.
stages:
  - test
  - build
  - deploy

# simulated testing stage, just for the sake of having a testing stage
# the runner is based on a ros image and has the tag "asdlkjfkd" (sorry for that)
another_runner:
  tags:
    - asdlkjfkd 
  stage: test
  script:
    - pwd
    - g++ main.cpp -o main
    - ./main
    - source /opt/ros/kinetic/setup.bash
    - rosversion -d

# another runner with the tag "hohoho" is based on a dind image and his volume is connected to the Unix Socket to communicate with the docker daemon of local machine.
# Therefore it can build images into the local docker image registry. It uses a Dockerfile sitting in gitlab repository.
# How to differentiate between multiple Dockerfiles?
build_image:
  tags:
    - hohoho
  stage: build
  script:
    - docker images
    - docker build -t redis-server .
    - docker images

# The same runner is able to create containers on the local machine based on images of the local machine.
# Furthermore it can instruct running containers to execute some command, like building a separate container.
# Currently stage is stuck because container is running. Maybe execute command in background.
deploy_image:
  tags:
    - hohoho
  stage: deploy
  script:
    - docker ps 
    - docker exec -i my_nodes_master_node_1 docker run --name redis_instance -t redis-server

